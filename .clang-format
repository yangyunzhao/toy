Language:        Cpp
# 指定语言是C++。

# BasedOnStyle:  LLVM
# 注释掉的行表示不基于LLVM风格。

AccessModifierOffset: -4
# 访问修饰符（如public, private）相对于类定义的偏移量是-2个空格。

AlignAfterOpenBracket: Align
# 括号打开后的参数对齐方式。Align表示对齐到括号。

AlignConsecutiveAssignments: false
# 连续赋值语句不对齐等号。

AlignConsecutiveBitFields: false
# 位域声明不连续对齐。

AlignConsecutiveDeclarations: false
# 连续声明不对齐。

AlignEscapedNewlines: Right
# 宏定义中换行符的对齐方式。

AlignOperands:   true
# 操作数对齐。

AlignTrailingComments: true
# 行尾注释对齐。

AllowAllArgumentsOnNextLine: true
# 允许所有参数放在下一行。

AllowAllConstructorInitializersOnNextLine: true
# 允许所有构造函数初始化列表放在下一行。

AllowAllParametersOfDeclarationOnNextLine: true
# 允许所有声明的参数放在下一行。

AllowShortBlocksOnASingleLine: Never
# 不允许短代码块在单行上显示。

AllowShortCaseLabelsOnASingleLine: false
# 不允许短case标签在单行上。

AllowShortFunctionsOnASingleLine: None
# 不允许短函数在单行上显示。

AllowShortLambdasOnASingleLine: All
# 允许所有短lambda表达式在单行上。

AllowShortIfStatementsOnASingleLine: false
# 不允许短if语句在单行上。

AllowShortLoopsOnASingleLine: false
# 不允许短循环在单行上。

AlwaysBreakAfterReturnType: None
# 函数返回类型后不强制换行。

AlwaysBreakBeforeMultilineStrings: false
# 多行字符串前不强制换行。

AlwaysBreakTemplateDeclarations: Yes
# 模板声明总是换行。

BinPackArguments: false
# 不要将函数参数打包到一行能。

BinPackParameters: false
# 不要将函数参数打包到一行。

BraceWrapping:
  # 大括号的包裹规则。
  AfterCaseLabel:  false
  AfterClass:      false
  AfterControlStatement: false
  AfterEnum:       false
  AfterFunction:   true
  AfterNamespace:  false
  AfterObjCDeclaration: false
  AfterStruct:     false
  AfterUnion:      false
  AfterExternBlock: false
  BeforeCatch:     false
  BeforeElse:      false
  IndentBraces:    false
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true

BreakBeforeBinaryOperators: None
# 二元运算符前不换行。

BreakBeforeBraces: Attach
# 函数声明右括号后的左大括号不换行。

BreakBeforeInheritanceComma: false
# 继承列表中的逗号前不换行。

BreakInheritanceList: BeforeColon
# 继承列表在冒号前换行。

BreakBeforeTernaryOperators: true
# 三元运算符前换行。

BreakConstructorInitializersBeforeComma: false
# 构造函数初始化列表中逗号前不换行。

BreakConstructorInitializers: BeforeColon
# 构造函数初始化列表在冒号前换行。

BreakAfterJavaFieldAnnotations: false
# Java字段注释后不换行（C++项目中不适用）。

BreakStringLiterals: true
# 字符串字面量允许换行。

ColumnLimit:     0
# 没有硬性限制每行代码字符数。

CommentPragmas:  '^ IWYU pragma:'
# 定义pragma注释的格式。

CompactNamespaces: false
# 不压缩命名空间。

ConstructorInitializerAllOnOneLineOrOnePerLine: false
# 构造函数初始化列表不是全部在一行就是每个一行。

ConstructorInitializerIndentWidth: 4
# 构造函数初始化列表的缩进宽度为4个空格。

ContinuationIndentWidth: 4
# 续行的缩进宽度为4个空格。

Cpp11BracedListStyle: true
# 使用C++11风格的大括号列表。

DeriveLineEnding: true
# 推导行结束符。

DerivePointerAlignment: false
# 将指针和引用符号靠左对齐，紧贴前面的代码，后面有一个空格。

DisableFormat:   false
# 不禁用格式化。

ExperimentalAutoDetectBinPacking: false
# 不使用实验性的自动检测二进制打包。

FixNamespaceComments: true
# 修复命名空间注释。

ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH
# 定义foreach宏。

IncludeBlocks:   Preserve
# 保持包含块的格式。

IncludeCategories:
  # 定义包含类别及其优先级。
  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
    Priority:        2
  - Regex:           '^(<|"(gtest|gmock|isl|json)/)'
    Priority:        3
  - Regex:           '.*'
    Priority:        1

IncludeIsMainRegex: '([-_](test|unittest))?$'
# 定义主要头文件的正则表达式。

IndentCaseBlocks: true
# 缩进case块。

IndentCaseLabels: false
# case标签不缩进。

IndentExternBlock: AfterExternBlock
# extern块后缩进。

IndentGotoLabels: true
# goto标签缩进。

IndentPPDirectives: AfterHash
# 预处理指令在#后缩进。

IndentWidth:     4
# 缩进宽度为4个空格。

IndentWrappedFunctionNames: false
# 包裹的函数名不缩进。

JavaScriptQuotes: Leave
# JavaScript引号保持原样（C++项目中不适用）。

JavaScriptWrapImports: true
# JavaScript import语句换行（C++项目中不适用）。

KeepEmptyLinesAtTheStartOfBlocks: false
# 不保持块开始处的空行。

MacroBlockBegin: ''
MacroBlockEnd:   ''
# 宏块的开始和结束标记为空。

MaxEmptyLinesToKeep: 1
# 保留的最大空行数为1。

NamespaceIndentation: None
# 命名空间不缩进。

ObjCBinPackProtocolList: Auto
# Objective-C协议列表自动打包（C++项目中不适用）。

ObjCBlockIndentWidth: 2
# Objective-C块的缩进宽度为2个空格（C++项目中不适用）。

ObjCSpaceAfterProperty: false
# Objective-C属性后不加空格（C++项目中不适用）。

ObjCSpaceBeforeProtocolList: true
# Objective-C协议列表前加空格（C++项目中不适用）。

PenaltyBreakAssignment: 2
# 分割赋值语句的惩罚值。

PenaltyBreakBeforeFirstCallParameter: 19
# 在第一个调用参数前分行的惩罚值。

PenaltyBreakComment: 300
# 分割注释的惩罚值。

PenaltyBreakFirstLessLess: 120
# 分割第一个<<操作符的惩罚值。

PenaltyBreakString: 1000
# 分割字符串的惩罚值。

PenaltyExcessCharacter: 1000000
# 每个超出列限制的字符的惩罚值。

PenaltyReturnTypeOnItsOwnLine: 60
# 返回类型在单独一行上的惩罚值。

PointerAlignment: Left
# 指针对齐方式为左对齐。

ReflowComments:  true
# 重新流式处理注释。

SortUsingDeclarations: true
# 对using声明进行排序，以保持代码整洁和一致。

SpaceAfterCStyleCast: false
# C风格转换后不加空格，例如(int)x。

SpaceAfterLogicalNot: false
# 逻辑非操作符后不加空格，例如!condition。

SpaceAfterTemplateKeyword: true
# template关键字后加空格，例如template <class T>。

SpaceBeforeAssignmentOperators: true
# 赋值操作符前加空格，例如a = b。

SpaceBeforeCpp11BracedList: false
# C++11的大括号初始化列表前不加空格，例如vector<int> v{1, 2, 3}。

SpaceBeforeCtorInitializerColon: true
# 构造函数初始化列表的冒号前加空格，例如Constructor() : member(value) {}。

SpaceBeforeInheritanceColon: true
# 继承列表的冒号前加空格，例如class Derived : public Base {}。

SpaceBeforeParens: ControlStatements
# 控制语句的括号前加空格，例如if (condition) {}。

SpaceBeforeRangeBasedForLoopColon: true
# 基于范围的for循环中冒号前加空格，例如for (auto val : values) {}。

SpaceInEmptyBlock: false
# 空代码块内不加空格，例如{}。

SpaceInEmptyParentheses: false
# 空括号内不加空格，例如void foo()。

SpacesBeforeTrailingComments: 1
# 行尾注释前加一个空格。

SpacesInAngles:  false
# 尖括号内不加空格，例如std::vector<int>。

SpacesInContainerLiterals: true
# 容器字面量内加空格，例如{ 1, 2, 3 }。

SpacesInCStyleCastParentheses: false
# C风格转换的括号内不加空格，例如(int) x。

SpacesInParentheses: false
# 普通括号内不加空格，例如foo(1, 2)。

SpacesInSquareBrackets: false
# 方括号内不加空格，例如array[10]。

Standard:        Latest
# 使用最新的C++标准。

StatementMacros:
  - Q_UNUSED
  - QT_REQUIRE_VERSION
# 定义特定的宏，这些宏将被视为独立的语句。

TabWidth:        4
# 制表符的宽度设为4个空格。

UseCRLF:         false
# 使用LF作为行结束符，而非CRLF。

UseTab:          Never
# 从不使用制表符进行缩进。